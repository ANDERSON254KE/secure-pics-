// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
   password      String? 
  emailVerified DateTime?
  image         String?
  role          String    @default("photographer")
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  galleries     Gallery[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gallery {
  id             String   @id @default(cuid())
  name           String
  description    String?
  photographerId String
  photographer   User     @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  clientEmail    String
  clientName     String
  accessCode     String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiresAt      DateTime?
  isActive       Boolean  @default(true)
  images         Image[]
  orders         Order[]
  views          Int      @default(0)
  downloads      Int      @default(0)
}

model Image {
  id          String  @id @default(cuid())
  filename    String
  originalUrl String
  thumbnailUrl String
  galleryId   String
  gallery     Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  price       Float   @default(10.00)
  selected    Boolean @default(false)
  orderItems  OrderItem[]
  uploadedAt  DateTime @default(now())
  width       Int?
  height      Int?
  size        Int?
}

model Order {
  id          String   @id @default(cuid())
  galleryId   String
  gallery     Gallery  @relation(fields: [galleryId], references: [id])
  clientEmail String
  clientName  String
  total       Float
  stripeSessionId String? @unique
  status      String   @default("pending") // pending, completed, failed
  createdAt   DateTime @default(now())
  orderItems  OrderItem[]
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  imageId String
  image   Image  @relation(fields: [imageId], references: [id])
  price   Float
}